,A,B,C,D,E,F
1,~~~ Paper Details ~~~~, , , , ,
2,bibliographicCitation,"{cobbe2023, author = {Cobbe, Jennifer and Veale, Michael and Singh, Jatinder}, title = {Understanding Accountability in Algorithmic Supply Chains}, year = {2023}}", , , ,
3,~~~ Annotator Details ~~~~, , , , ,
4,identifier,dk, , , ,
5,role,annotator,DO NOT CHANGE, , ,
6,generatedAtTime,2023-12-13, , , ,
7,~~~ Class Instance / Individual Annotations starts below ~~~~, , , , ,
8,individualName,type,sourceExcerpt,sourcePageNumber,sourceExtractedDescription,
9,AgileDevelopers,Agent,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,Agile development combined with services-based distribution models,
10,DynamicSupplyChains,Artifact,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors.,
11,ConstantRelations,Causal_Theory,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,bilateral relations between particular actors may remain relatively consistent,
12,DynamicRelations,Perceived_Problem,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,"the nature of their relationship—the services provided and used, for example—may still change over time.",
13,Multidirectionality,Causal_Theory,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it.,
14,Variation,Perceived_Problem,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,their structures may vary depending on the input data and the outputs of component systems.,
15,TimeLagInUnderstanding,Perceived_Problem,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,may therefore only be fully apparent once the functionality or outcome has been been produced,
16,ActorsInSupplyChain,Agent,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,their,
17, , , , , ,
18, , , , , ,
19,~~~ Property / Axiom / Triple Annotations starts below ~~~~, , , , ,
20,annotatedSource,annotatedProperty,annotatedTarget,sourceExcerpt,sourcePageNumber,sourceExtractedDescription
21,AgileDevelopers,hasProducedArtifact,DynamicSupplyChains,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors.
22,DynamicSupplyChains,reflectsPrecept,Multidirectionality,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it.
23,DynamicSupplyChains,reflectsPrecept,Variation,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,"Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of component systems."
24,DynamicSupplyChains,reflectsPrecept,TimeLagInUnderstanding,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,"A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced"
25,ConstantRelations,constrainsAgent,ActorsInSupplyChain,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,"As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent"
26,DynamicRelations,constrainsAgent,ActorsInSupplyChain,"Agile development combined with services-based distribution models has produced algorithmic supply chains which operate as dynamic processes of data flow between a changing number and arrangement of actors. Just as critical engagement with algorithmic systems must recognise that they change over time [96], so do algorithmic supply chains. Indeed, because data flow ties actors together, a chain may differ each time it is instantiated. At various points there may be multiple possible directions for data to flow between actors depending on the outcomes of analyses performed on it. A face detected in a video stream using one service, for example, might trigger a flow to a separate facial recognition service to identify the person (with its own supply chain and associated dataflows) and back again. This might trigger a flow to a third system to record and alert of the presence of a particular individual. Supply chains can thus be dynamically instantiated, and their structures may vary depending on the input data and the outputs of com-ponent systems. A supply chain’s structure—the actors involved, what they do for each other, the interdependencies and power balances between them—may therefore only be fully apparent once the functionality or outcome has been been produced. However, technical, legal, or economic relations between actors often persist across multiple instances of a particular supply chain. An application developed to use a particular provider’s service will typically use that service repeatedly, even if the path of data flow between actors differs between instances. As such, while supply chains may change overall, bilateral relations between particular actors may remain relatively consistent. However, the nature of their relationship—the services provided and used, for example—may still change over time. An application developer may introduce new features, for instance, which use additional services offered by the particular provider. They may deprecate features such that particular services are no longer needed. They might employ ad-ditional support services for rapid growth in application resource requirements (for example, where an application ‘goes viral’). The Provider may change their terms of service (altering the legal rela-tionship between them) or withdraw particular services (resulting in changes in the developer’s application). These are just some of the ways that relationships between actors may change.",1190-1,"However, the nature of their relationship—the services provided and used, for example—may still change over time."
